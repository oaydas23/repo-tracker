import groovy.json.JsonSlurper
import groovy.json.JsonOutput

// The purpose of this file is testing post requests from grade
// To be able to send all gradle data from all repos, must run postExample task on each separately

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    id 'nebula.dependency-lock' version '11.1.1'
    id 'nebula.lint' version '17.2.3'
}

group = 'com.resolute'
var baseVersion = "3"
var releaseNum = "85"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

task postExample {
    doLast {
        def artifactNames = []
        publishing.publications.each { publication ->
            publication.artifacts.each { artifact ->
                def fileName = artifact.file.name
                println "Artifact: ${fileName}"
                artifactNames.add(fileName)
            }
        }

        def body = [
                "pname": project.name,
                "gname": project.group,
                "bnum": baseVersion + "." + releaseNum,
                "bdate": "XX-XX-XXXX XX:XX:XX",
                "artifacts": artifactNames
        ]
        def req = new URL('http://localhost:1000/artifact').openConnection()
        req.setRequestMethod("POST")
        req.setRequestProperty("Content-Type", "application/json; charset=UTF-8")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))
        logger.quiet "Status code: ${req.getResponseCode()}" // HTTP request done on first read
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: jar, classifier: 'jar'
            artifact sourcesJar
            artifact javadocJar
        }
    }
}




